""" list of tokens parsed into a command. """

import obj
import threading

class Token(obj.Object):

    def __init__(self):
        super().__init__()
        self.arg = ""
        self.cmd = ""
        self.dkey = ""
        self.down = None
        self.equal = ""
        self.ignore = ""
        self.index = None
        self.match = ""
        self.option = ""
        self.selector = ""
        self.setter = ""
        self.up = None
        self.value = ""

    def parse(self, nr, word):
        if nr == 0:
            if word.startswith("!"):
                word = word[1:]
            if obj.names.get(word):
                self.cmd = word
            return
        if word.startswith("-"):
            try:
                self.down = word
                return
            except ValueError:
                pass
        if nr == 1:
            self.match = obj.classes.get(word, word)
            self.arg = word
            return        
        if "http" in word:
            self.value = word
            self.arg = word
            return
        if word.startswith("+"):
            try:
                self.up = int(word[1:])
                return
            except ValueError:
                pass
        if word.endswith("-"):
            self.ignore = word[:-1]
            word = self.ignore
        if "==" in word:
            self.selector, self.value = word.split("==")
            self.dkey = self.selector
        elif "=" in word:
            self.setter, self.value = word.split("=")
            self.dkey = self.setter
        else:
            self.arg = word
            self.dkey = word
            self.value = word
        if nr == 2 and not self.selector and not self.setter:
            self.selector = word
            self.value = None

class Command(obj.Object):

    __slots__ = ("_error", "_func", "_ready", "_thrs")

    def __init__(self):
        super().__init__()
        self._error = None
        self._func = None
        self._ready = threading.Event()
        self._result = []
        self._thrs = []
        self.args = []
        self.channel = ""
        self.cmd = ""
        self.delta = 0
        self.dkeys = []
        self.ignore = ""
        self.index = None
        self.match = None
        self.options = obj.cfg.options
        self.orig = None
        self.origin = ""
        self.rest = ""
        self.selector = {}
        self.setter = {}
        self.txt = ""

    def get_aliased(self, txt):
        spl = txt.split()
        if spl and spl[0] in obj.aliases:
            cmd = spl[0]
            v = obj.aliases.get(cmd, None)
            if v:
                spl[0] = cmd.replace(cmd, v)
        txt = " ".join(spl)
        return txt

    def get_tokens(self):
        words = self.txt.split()
        tokens = []
        nr = -1
        for word in words:
            nr += 1
            token = Token()
            token.parse(nr, word)
            tokens.append(token)
        return tokens

    def parse(self, txt):
        self.txt = self.get_aliased(txt)
        nr = -1
        self.args = []
        self.dkeys = []
        prev = ""
        for token in self.get_tokens():
             nr += 1
             if token.cmd:
                 self.cmd = token.cmd
                 continue
             if token.match:
                 self.match = token.match
                 self.args.append(token.arg)
                 continue
             if prev == "-o":
                 prev = ""
                 self.options += "," + token.value
                 continue
             if token.down:
                 prev = token.down
                 continue
             if token.ignore:
                 self.ignore = token.ignore
             elif token.dkey:
                 self.dkeys.append(token.dkey)
             if token.selector:
                 self.selector[token.selector] = token.value
             if token.setter:
                 self.setter[token.setter] = token.value
             if token.up:
                 self.delta = obj.utils.parse_date(token.up)
             if token.down:
                 self.delta = obj.utils.parse_data(token.down)
             if token.arg:
                 self.args.append(token.arg)
        for opt in self.options.split(","):
            try:
                self.index = int(opt)
                break
            except ValueError:
                 pass
            continue
        self.rest = " ".join(self.args)
        self.time = obj.utils.to_day(self.rest)

    def ready(self):
        return self._ready.set()

    def wait(self):
        if self not in obj.waiting:
            obj.waiting.append(self)
        self._ready.wait()
        result = []
        thrs = []
        for thr in self._thrs:
            try:
                ret = thr.join()
            except RuntimeError:
                continue
            thrs.append(thr)
        for thr in thrs:
            self._thrs.remove(thr)
        if self in obj.waiting:
            obj.waiting.remove(self)
        return self
